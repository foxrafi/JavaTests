import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv('your_file.csv')

# Initialize an empty tree dictionary
tree = {}

# Initialize counters for IDs
id_counter = 1

# Create a DataFrame to store the data with IDs and parent IDs
result_df = pd.DataFrame(columns=["id", "parent_id", "level_1", "level_2", "level_3"])

# Iterate through rows and build the tree
for index, row in df.iterrows():
    level_1, level_2, level_3 = row
    if level_1 not in tree:
        tree[level_1] = {"id": id_counter, "parent_id": None}
        id_counter += 1
    if level_2 not in tree[level_1]:
        tree[level_1][level_2] = {"id": id_counter, "parent_id": tree[level_1]["id"]}
        id_counter += 1
    tree[level_1][level_2][level_3] = {"id": id_counter, "parent_id": tree[level_1][level_2]["id"]}
    id_counter += 1

# Function to generate SQL insert statements for each node
def generate_sql_insert(node):
    sql_inserts = []
    for key, value in node.items():
        if isinstance(value, dict):
            sql_inserts.extend(generate_sql_insert(value))
        else:
            insert_statement = f"INSERT INTO your_table_name (id, parent_id, level_1, level_2, level_3) VALUES ({value['id']}, {value['parent_id']}, '{level_1}', '{key}', '{value}');"
            sql_inserts.append(insert_statement)
    return sql_inserts

# Function to print the SQL insert statements
def print_sql_inserts(tree):
    for level_1, level_2_node in tree.items():
        for level_2, level_3_nodes in level_2_node.items():
            sql_inserts = generate_sql_insert(level_3_nodes)
            for insert_statement in sql_inserts:
                print(insert_statement)

# Print the SQL insert statements
print_sql_inserts(tree)
