import csv

class Node:
    def __init__(self, data):
        self.data = data
        self.children = []

def construct_trees(csv_file_path):
    trees = {}
    with open(csv_file_path, 'r') as file:
        reader = csv.reader(file)
        header = next(reader)  # assuming the first row contains headers
        for row in reader:
            parent_key, child_key = row[:2]  # Assuming the first two columns represent parent and child keys
            if parent_key not in trees:
                trees[parent_key] = Node(parent_key)
            if child_key not in trees:
                trees[child_key] = Node(child_key)
            trees[parent_key].children.append(trees[child_key])
    
    return trees

def mark_leaves_and_parents(node):
    if not node.children:
        node.data['type'] = 'leaf'
    else:
        node.data['type'] = 'parent'
        for child in node.children:
            mark_leaves_and_parents(child)

def main():
    csv_file_path = 'your_file.csv'  # Replace with your actual file path

    trees = construct_trees(csv_file_path)

    for root_key, root_node in trees.items():
        mark_leaves_and_parents(root_node)

        # Now you can access the information about each node in the current tree
        print(f"Tree with Root {root_key}:")
        for node_key, node in trees.items():
            print(f"  Node: {node_key}, Type: {node.data['type']}")

if __name__ == "__main__":
    main()
